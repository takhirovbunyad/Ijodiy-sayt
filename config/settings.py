"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q1k#a_(ft9dq!aoryh%b4!wy+aa14*=tqg=99c(g^wjv8fg)yl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'my_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
import os
import psycopg2

def check_connection(db_settings):
    try:
        conn = psycopg2.connect(
            dbname=db_settings['NAME'],
            user=db_settings['USER'],
            password=db_settings['PASSWORD'],
            host=db_settings['HOST'],
            port=db_settings['PORT'],
            sslmode=db_settings.get("OPTIONS", {}).get("sslmode", "require"),
        )
        conn.close()
        return True
    except Exception:
        return False


DATABASES = {}

# DB1
db1_settings = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'ijodiysayt',
    'USER': 'bitnet',
    'PASSWORD': 'oTFfPBJuIN1JvnvcNRRUHoG1pVkz2iYM',
    'HOST': 'dpg-d39r2ct6ubrc73ebtrsg-a.oregon-postgres.render.com',
    'PORT': '5432',
    'OPTIONS': {'sslmode': 'require'},
}
if check_connection(db1_settings):
    DATABASES['default'] = db1_settings
else:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

# DB2
db2_settings = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'ijodiysaytdb2',
    'USER': 'bitnet',
    'PASSWORD': 'iCOh3UCkK4up2JcVC4n0zNP6XorqlbbN',
    'HOST': 'dpg-d39rchs9c44c73forbeg-a.oregon-postgres.render.com',
    'PORT': '5432',
    'OPTIONS': {'sslmode': 'require'},
}
DATABASES['db2'] = db2_settings if check_connection(db2_settings) else {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR, 'db2.sqlite3'),
}

# DB3
db3_settings = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'ijodiydb3',
    'USER': 'bitnet',
    'PASSWORD': 'iDeQ8ftPG6knxnRagVbAQV0gEwpUMgyW',
    'HOST': 'dpg-d39refgdl3ps73afkvog-a.oregon-postgres.render.com',
    'PORT': '5432',
    'OPTIONS': {'sslmode': 'require'},
}
DATABASES['db3'] = db3_settings if check_connection(db3_settings) else {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR, 'db3.sqlite3'),
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docQ.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/    ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]



MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

DATABASE_ROUTERS = ['my_app.routers.MultiDbRouter']
